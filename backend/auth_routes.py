from flask import Blueprint, request, jsonify
from flask_jwt_extended import (
    create_access_token, create_refresh_token,
    jwt_required, get_jwt_identity, unset_jwt_cookies
)
from backend.models import User
from backend import db  

auth_bp = Blueprint("auth", __name__)


# üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@auth_bp.route("/register", methods=["POST"])
def register():
    data = request.get_json()
    if not data or not all(key in data for key in ("username", "email", "password")):
        return jsonify({"error": "Missing fields"}), 400

    if User.query.filter_by(username=data["username"]).first():
        return jsonify({"error": "Username already exists"}), 409

    if User.query.filter_by(email=data["email"]).first():
        return jsonify({"error": "Email already exists"}), 409

    user = User(username=data["username"], email=data["email"])
    user.set_password(data["password"])
    
    db.session.add(user)
    db.session.commit()

    # üìå –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    access_token = create_access_token(identity=str(user.id))
    refresh_token = create_refresh_token(identity=str(user.id))

    return jsonify({
        "message": "User registered successfully",
        "access_token": access_token,
        "refresh_token": refresh_token
    }), 201

# üìå –õ–æ–≥–∏–Ω
@auth_bp.route("/login", methods=["POST"])
def login():
    data = request.get_json()
    if not data or not all(key in data for key in ("username", "password")):
        return jsonify({"error": "Missing fields"}), 400

    user = User.query.filter_by(username=data["username"]).first()
    if not user or not user.check_password(data["password"]):
        return jsonify({"error": "Invalid credentials"}), 401

    access_token = create_access_token(identity=str(user.id))
    refresh_token = create_refresh_token(identity=str(user.id))

    return jsonify({
        "access_token": access_token,
        "refresh_token": refresh_token
    }), 200


# üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (refresh)
@auth_bp.route("/refresh", methods=["POST"])
@jwt_required(refresh=True)
def refresh():
    user_id = get_jwt_identity() # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Ç–æ–∫–µ–Ω–∞
    new_access_token = create_refresh_token(identity=user_id)  # ‚úÖ user_id —É–∂–µ —Å—Ç—Ä–æ–∫–∞
    return jsonify({"access_token": new_access_token})

# üìå –í—ã—Ö–æ–¥ (logout)
@auth_bp.route("/logout", methods=["POST"])
@jwt_required()
def logout():
    response = jsonify({"message": "Logout successful"})
    unset_jwt_cookies(response)  # –£–¥–∞–ª—è–µ—Ç JWT-—Ç–æ–∫–µ–Ω—ã –∏–∑ cookie
    return response, 200



@auth_bp.route("/profile", methods=["GET"])
@jwt_required()
def profile():
    user_id = get_jwt_identity()
    user = User.query.get(user_id)
    
    if not user:
        return jsonify({"error": "User not found"}), 404
    
    return jsonify({
        "id": user.id,
        "username": user.username,
        "email": user.email,
        "role": user.role if hasattr(user, "role") else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        "created_at": user.created_at.strftime("%Y-%m-%d") if hasattr(user, "created_at") else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }), 200


@auth_bp.route('/profile/deposit', methods=['POST'])
@jwt_required()
def deposit_money():
    user_id = get_jwt_identity()
    data = request.get_json()
    amount = data.get("amount", 0)

    if amount <= 0:
        return jsonify({"error": "Deposit amount must be greater than zero"}), 400

    user = User.query.get(user_id)
    if not user:
        return jsonify({"error": "User not found"}), 404

    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É "NoneType + int"
    if user.balance is None:
        user.balance = 0.0

    user.balance += amount  # ‚úÖ –¢–µ–ø–µ—Ä—å –Ω–µ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∏
    db.session.commit()

    return jsonify({"message": "Balance updated", "new_balance": user.balance}), 200